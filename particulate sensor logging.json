[{"id":"c756e3f9.f0b22","type":"tab","label":"AQI logging","disabled":true,"info":""},{"id":"b0a91974.db2c98","type":"mqtt in","z":"c756e3f9.f0b22","name":"","topic":"home/SDS011/ppm25","qos":"1","datatype":"auto","broker":"83099161.44dac","x":380,"y":540,"wires":[["1620681.f381298","2eb6219c.d3d09e"]]},{"id":"ae4322df.7bedc","type":"mqtt in","z":"c756e3f9.f0b22","name":"","topic":"home/SDS011/ppm10","qos":"1","datatype":"auto","broker":"83099161.44dac","x":380,"y":620,"wires":[["1cc639da.dea0d6","277da309.89508c"]]},{"id":"1f979fc5.05965","type":"function","z":"c756e3f9.f0b22","name":"2.5PPM data to AQI","func":"//Formula taken from https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI\nvar Aqi25mmBreakpoints =  [0.0, 12.1, 35.5, 55.5, 150.5, 250.5, 350.5, 500.5];\nvar AqiIndexBreakpoints = [0,   51,   101,  151,  201,   301,   401,   500]; //this list is the bottom bound for each breakpoint\nvar ppm = parseFloat(msg.payload);\nvar AQI = 500; //set to max because if the reading doesn't fall in the range of the data, it's very bad AQI;\n\nfor (let i = 0; i < Aqi25mmBreakpoints.length; i++) {\n    if(ppm < Aqi25mmBreakpoints[i]) {\n        //These variable names correspond to the parameter names specefied in the link above.\n        //They aren't great but the intent is to allow these to be looked up that way.\n        // There is a single line version below if that's preferable\n        var I_high = AqiIndexBreakpoints[i] - 1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var I_low = AqiIndexBreakpoints[i-1];\n        var C_high = Aqi25mmBreakpoints[i] - 0.1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var C_low =  Aqi25mmBreakpoints[i - 1];\n        \n        AQI = ((I_high - I_low)/(C_high - C_low)) * (ppm - C_low) + I_low;\n        \n        //This is the single line version in case the verbode way using separate variables isn't suitable.\n        //AQI = ((((AqiIndexBreakpoints[i] -1) - AqiIndexBreakpoints[i-1])/((Aqi25mmBreakpoints[i] - 0.1) - Aqi25mmBreakpoints[i-1]))*(ppm-Aqi25mmBreakpoints[i-1])) + AqiIndexBreakpoints[i-1]; \n        break;\n    }\n}\n\nmsg.payload = Math.trunc(AQI).toString();\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":880,"y":560,"wires":[["728c70e5.79c0d","b38a4055.12994"]]},{"id":"f718b35a.89b97","type":"function","z":"c756e3f9.f0b22","name":"10PPM data to AQI","func":"//Formula taken from https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI\nvar Aqi10mmBreakpoints =  [0.0, 55, 155, 255, 355, 425, 505, 604];\nvar AqiIndexBreakpoints = [0,   51, 101, 151, 201, 301, 401, 500];\nvar ppm = parseFloat(msg.payload);\nvar AQI = 500; //set to max because if the reading doesn't fall in the range of the data, it's very bad AQI;\n\nfor (let i = 0; i < Aqi10mmBreakpoints.length; i++) {\n    if(ppm < Aqi10mmBreakpoints[i]) {\n        //These variable names correspond to the parameter names specefied in the link above.\n        //They aren't great but the intent is to allow these to be looked up that way.\n        // There is a single line version below if that's preferable\n        var I_high = AqiIndexBreakpoints[i] - 1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var I_low = AqiIndexBreakpoints[i-1];\n        var C_high = Aqi10mmBreakpoints[i] - 0.1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var C_low =  Aqi10mmBreakpoints[i - 1];\n        \n        AQI = ((I_high - I_low) / (C_high - C_low)) * (ppm - C_low) + I_low;\n        \n        \n        \n        \n        //AQI = (((AqiIndexBreakpoints[i] - 1 - AqiIndexBreakpoints[i-1])/(Aqi10mmBreakpoints[i] - 0.1 - Aqi10mmBreakpoints[i-1]))*(ppm-Aqi10mmBreakpoints[i-1])) + AqiIndexBreakpoints[i-1]; \n        break;\n    }\n}\n\nmsg.payload = Math.trunc(AQI).toString();\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":870,"y":640,"wires":[["728c70e5.79c0d","2be2e929.a339f6"]]},{"id":"1620681.f381298","type":"function","z":"c756e3f9.f0b22","name":"24 hr rolling average","func":"// determines the average of all payload values passed in \n// over the specified time range\n//const range = 20 * 60 * 1000;   // window time millisecs\n//make this 24 hours as the guide calls for.\nconst range = 24 * 60 * 60 * 1000;   // window time millisecs\nlet buffer = context.get('buffer') || [];\nlet total = context.get('total') || 0;   // the accumulated total so far\n\nlet now = new Date();\nlet value = Number(msg.payload);\n// remove any samples that are too old\nwhile (buffer[0] && buffer[0].timestamp < now - range) {\n    // remove oldest sample from array and total\n    //node.warn(`removing oldest ${buffer[0].timestamp}`);\n    total -= buffer[0].value;\n    buffer.shift();\n}\n// add the new sample to the end\nbuffer.push({timestamp: now, value: value});\ntotal += value;\n\ncontext.set('buffer', buffer);\ncontext.set('total', total);\n\nmsg.payload = total/buffer.length;\n//node.warn(`length: ${buffer.length}, total: ${total}, average: ${msg.payload}`);\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n//var keys = global.keys();\n//for(var i=0;i<keys.length;i++){\n//    global.set(keys[i]);\n//}","finalize":"","x":640,"y":560,"wires":[["1f979fc5.05965"]]},{"id":"1cc639da.dea0d6","type":"function","z":"c756e3f9.f0b22","name":"24 hr rolling average","func":"// determines the average of all payload values passed in \n// over the specified time range\n//const range = 20 * 60 * 1000;   // window time millisecs\n//make this 24 hours as the guide calls for.\nconst range = 24 * 60 * 60 * 1000;   // window time millisecs\nlet buffer = context.get('buffer') || [];\nlet total = context.get('total') || 0;   // the accumulated total so far\n\nlet now = new Date();\nlet value = Number(msg.payload);\n// remove any samples that are too old\nwhile (buffer[0] && buffer[0].timestamp < now - range) {\n    // remove oldest sample from array and total\n    //node.warn(`removing oldest ${buffer[0].timestamp}`);\n    total -= buffer[0].value;\n    buffer.shift();\n}\n// add the new sample to the end\nbuffer.push({timestamp: now, value: value});\ntotal += value;\n\ncontext.set('buffer', buffer);\ncontext.set('total', total);\n\nmsg.payload = total/buffer.length;\n//node.warn(`length: ${buffer.length}, total: ${total}, average: ${msg.payload}`);\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n//var keys = global.keys();\n//for(var i=0;i<keys.length;i++){\n//    global.set(keys[i]);\n//}","finalize":"","x":640,"y":640,"wires":[["f718b35a.89b97"]]},{"id":"728c70e5.79c0d","type":"join","z":"c756e3f9.f0b22","name":"join avgs","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1200,"y":600,"wires":[["64ef2415.e5c4fc"]]},{"id":"64ef2415.e5c4fc","type":"function","z":"c756e3f9.f0b22","name":"","func":"msg.topic = \"home/SDS011/AQI\";\nvar pm25aqi = parseInt(msg.payload[\"home/SDS011/ppm25\"]);\nvar pm10aqi = parseInt(msg.payload[\"home/SDS011/ppm10\"]);\n\nif (pm25aqi > pm10aqi) {\n    msg.payload = pm25aqi.toString();\n} else {\n    msg.payload = pm10aqi.toString();\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1360,"y":600,"wires":[["802d918b.7fef9"]]},{"id":"277da309.89508c","type":"function","z":"c756e3f9.f0b22","name":"10PPM data to AQI","func":"//Formula taken from https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI\nvar Aqi10mmBreakpoints =  [0.0, 55, 155, 255, 355, 425, 505, 604];\nvar AqiIndexBreakpoints = [0,   51, 101, 151, 201, 301, 401, 500];\nvar ppm = parseFloat(msg.payload);\nvar AQI = 500; //set to max because if the reading doesn't fall in the range of the data, it's very bad AQI;\n\nfor (let i = 0; i < Aqi10mmBreakpoints.length; i++) {\n    if(ppm < Aqi10mmBreakpoints[i]) {\n        //These variable names correspond to the parameter names specefied in the link above.\n        //They aren't great but the intent is to allow these to be looked up that way.\n        // There is a single line version below if that's preferable\n        var I_high = AqiIndexBreakpoints[i] - 1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var I_low = AqiIndexBreakpoints[i-1];\n        var C_high = Aqi10mmBreakpoints[i] - 0.1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var C_low =  Aqi10mmBreakpoints[i - 1];\n        \n        AQI = ((I_high - I_low) / (C_high - C_low)) * (ppm - C_low) + I_low;\n        \n        \n        \n        \n        //AQI = (((AqiIndexBreakpoints[i] - 1 - AqiIndexBreakpoints[i-1])/(Aqi10mmBreakpoints[i] - 0.1 - Aqi10mmBreakpoints[i-1]))*(ppm-Aqi10mmBreakpoints[i-1])) + AqiIndexBreakpoints[i-1]; \n        break;\n    }\n}\n\nmsg.payload = Math.trunc(AQI).toString();\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":630,"y":600,"wires":[["5522c62b.109268","e0353f80.479c9"]]},{"id":"2eb6219c.d3d09e","type":"function","z":"c756e3f9.f0b22","name":"2.5PPM data to AQI","func":"//Formula taken from https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI\nvar Aqi25mmBreakpoints =  [0.0, 12.1, 35.5, 55.5, 150.5, 250.5, 350.5, 500.5];\nvar AqiIndexBreakpoints = [0,   51,   101,  151,  201,   301,   401,   500]; //this list is the bottom bound for each breakpoint\nvar ppm = parseFloat(msg.payload);\nvar AQI = 500; //set to max because if the reading doesn't fall in the range of the data, it's very bad AQI;\n\nfor (let i = 0; i < Aqi25mmBreakpoints.length; i++) {\n    if(ppm < Aqi25mmBreakpoints[i]) {\n        //These variable names correspond to the parameter names specefied in the link above.\n        //They aren't great but the intent is to allow these to be looked up that way.\n        // There is a single line version below if that's preferable\n        var I_high = AqiIndexBreakpoints[i] - 1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var I_low = AqiIndexBreakpoints[i-1];\n        var C_high = Aqi25mmBreakpoints[i] - 0.1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var C_low =  Aqi25mmBreakpoints[i - 1];\n        \n        AQI = ((I_high - I_low)/(C_high - C_low)) * (ppm - C_low) + I_low;\n        \n        //This is the single line version in case the verbode way using separate variables isn't suitable.\n        //AQI = ((((AqiIndexBreakpoints[i] -1) - AqiIndexBreakpoints[i-1])/((Aqi25mmBreakpoints[i] - 0.1) - Aqi25mmBreakpoints[i-1]))*(ppm-Aqi25mmBreakpoints[i-1])) + AqiIndexBreakpoints[i-1]; \n        break;\n    }\n}\n\nmsg.payload = Math.trunc(AQI).toString();\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":640,"y":520,"wires":[["5522c62b.109268","e7f241b7.47b25"]]},{"id":"e7be9f01.9ad4d","type":"mqtt in","z":"c756e3f9.f0b22","name":"","topic":"home/PMS3003/ppm10","qos":"1","datatype":"auto","broker":"83099161.44dac","x":420,"y":1920,"wires":[["c4631d64.50d76"]]},{"id":"7700e853.9b87f8","type":"mqtt in","z":"c756e3f9.f0b22","name":"","topic":"home/PMS3003/ppm25","qos":"1","datatype":"auto","broker":"83099161.44dac","x":380,"y":720,"wires":[["6e7676e8.a72058","d9317c06.dc812"]]},{"id":"7184ebc3.0424b4","type":"mqtt in","z":"c756e3f9.f0b22","name":"","topic":"home/PMS3003/ppmTen","qos":"1","datatype":"auto","broker":"83099161.44dac","x":370,"y":800,"wires":[["c1de09ca.322588","8a525418.396cf8"]]},{"id":"6eb8bed1.0ac37","type":"function","z":"c756e3f9.f0b22","name":"","func":"msg.topic = \"home/SDS011/AQI_insta\";\nvar pm25aqi = parseInt(msg.payload[\"home/SDS011/ppm25\"]);\nvar pm10aqi = parseInt(msg.payload[\"home/SDS011/ppm10\"]);\n\nif (pm25aqi > pm10aqi) {\n    msg.payload = pm25aqi.toString();\n} else {\n    msg.payload = pm10aqi.toString();\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1360,"y":560,"wires":[["48a1c31c.f4d81c"]]},{"id":"5522c62b.109268","type":"join","z":"c756e3f9.f0b22","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1190,"y":560,"wires":[["6eb8bed1.0ac37"]]},{"id":"6040ba8c.6ff334","type":"function","z":"c756e3f9.f0b22","name":"2.5PPM data to AQI","func":"//Formula taken from https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI\nvar Aqi25mmBreakpoints =  [0.0, 12.1, 35.5, 55.5, 150.5, 250.5, 350.5, 500.5];\nvar AqiIndexBreakpoints = [0,   51,   101,  151,  201,   301,   401,   500]; //this list is the bottom bound for each breakpoint\nvar ppm = parseFloat(msg.payload);\nvar AQI = 500; //set to max because if the reading doesn't fall in the range of the data, it's very bad AQI;\n\nfor (let i = 0; i < Aqi25mmBreakpoints.length; i++) {\n    if(ppm < Aqi25mmBreakpoints[i]) {\n        //These variable names correspond to the parameter names specefied in the link above.\n        //They aren't great but the intent is to allow these to be looked up that way.\n        // There is a single line version below if that's preferable\n        var I_high = AqiIndexBreakpoints[i] - 1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var I_low = AqiIndexBreakpoints[i-1];\n        var C_high = Aqi25mmBreakpoints[i] - 0.1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var C_low =  Aqi25mmBreakpoints[i - 1];\n        \n        AQI = ((I_high - I_low)/(C_high - C_low)) * (ppm - C_low) + I_low;\n        \n        //This is the single line version in case the verbode way using separate variables isn't suitable.\n        //AQI = ((((AqiIndexBreakpoints[i] -1) - AqiIndexBreakpoints[i-1])/((Aqi25mmBreakpoints[i] - 0.1) - Aqi25mmBreakpoints[i-1]))*(ppm-Aqi25mmBreakpoints[i-1])) + AqiIndexBreakpoints[i-1]; \n        break;\n    }\n}\n\nmsg.payload = Math.trunc(AQI).toString();\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":880,"y":740,"wires":[["865e0d25.31718","b38a4055.12994"]]},{"id":"8b04aa17.05c3d8","type":"function","z":"c756e3f9.f0b22","name":"10PPM data to AQI","func":"//Formula taken from https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI\nvar Aqi10mmBreakpoints =  [0.0, 55, 155, 255, 355, 425, 505, 604];\nvar AqiIndexBreakpoints = [0,   51, 101, 151, 201, 301, 401, 500];\nvar ppm = parseFloat(msg.payload);\nvar AQI = 500; //set to max because if the reading doesn't fall in the range of the data, it's very bad AQI;\n\nfor (let i = 0; i < Aqi10mmBreakpoints.length; i++) {\n    if(ppm < Aqi10mmBreakpoints[i]) {\n        //These variable names correspond to the parameter names specefied in the link above.\n        //They aren't great but the intent is to allow these to be looked up that way.\n        // There is a single line version below if that's preferable\n        var I_high = AqiIndexBreakpoints[i] - 1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var I_low = AqiIndexBreakpoints[i-1];\n        var C_high = Aqi10mmBreakpoints[i] - 0.1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var C_low =  Aqi10mmBreakpoints[i - 1];\n        \n        AQI = ((I_high - I_low) / (C_high - C_low)) * (ppm - C_low) + I_low;\n        \n        \n        \n        \n        //AQI = (((AqiIndexBreakpoints[i] - 1 - AqiIndexBreakpoints[i-1])/(Aqi10mmBreakpoints[i] - 0.1 - Aqi10mmBreakpoints[i-1]))*(ppm-Aqi10mmBreakpoints[i-1])) + AqiIndexBreakpoints[i-1]; \n        break;\n    }\n}\n\nmsg.payload = Math.trunc(AQI).toString();\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":870,"y":820,"wires":[["865e0d25.31718","2be2e929.a339f6"]]},{"id":"d9317c06.dc812","type":"function","z":"c756e3f9.f0b22","name":"24 hr rolling average","func":"// determines the average of all payload values passed in \n// over the specified time range\n//const range = 20 * 60 * 1000;   // window time millisecs\n//make this 24 hours as the guide calls for.\nconst range = 24 * 60 * 60 * 1000;   // window time millisecs\nlet buffer = context.get('buffer') || [];\nlet total = context.get('total') || 0;   // the accumulated total so far\n\nlet now = new Date();\nlet value = Number(msg.payload);\n// remove any samples that are too old\nwhile (buffer[0] && buffer[0].timestamp < now - range) {\n    // remove oldest sample from array and total\n    //node.warn(`removing oldest ${buffer[0].timestamp}`);\n    total -= buffer[0].value;\n    buffer.shift();\n}\n// add the new sample to the end\nbuffer.push({timestamp: now, value: value});\ntotal += value;\n\ncontext.set('buffer', buffer);\ncontext.set('total', total);\n\nmsg.payload = total/buffer.length;\n//node.warn(`length: ${buffer.length}, total: ${total}, average: ${msg.payload}`);\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n//var keys = global.keys();\n//for(var i=0;i<keys.length;i++){\n//    global.set(keys[i]);\n//}","finalize":"","x":640,"y":740,"wires":[["6040ba8c.6ff334"]]},{"id":"8a525418.396cf8","type":"function","z":"c756e3f9.f0b22","name":"24 hr rolling average","func":"// determines the average of all payload values passed in \n// over the specified time range\n//const range = 20 * 60 * 1000;   // window time millisecs\n//make this 24 hours as the guide calls for.\nconst range = 24 * 60 * 60 * 1000;   // window time millisecs\nlet buffer = context.get('buffer') || [];\nlet total = context.get('total') || 0;   // the accumulated total so far\n\nlet now = new Date();\nlet value = Number(msg.payload);\n// remove any samples that are too old\nwhile (buffer[0] && buffer[0].timestamp < now - range) {\n    // remove oldest sample from array and total\n    //node.warn(`removing oldest ${buffer[0].timestamp}`);\n    total -= buffer[0].value;\n    buffer.shift();\n}\n// add the new sample to the end\nbuffer.push({timestamp: now, value: value});\ntotal += value;\n\ncontext.set('buffer', buffer);\ncontext.set('total', total);\n\nmsg.payload = total/buffer.length;\n//node.warn(`length: ${buffer.length}, total: ${total}, average: ${msg.payload}`);\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n//var keys = global.keys();\n//for(var i=0;i<keys.length;i++){\n//    global.set(keys[i]);\n//}","finalize":"","x":640,"y":820,"wires":[["8b04aa17.05c3d8"]]},{"id":"865e0d25.31718","type":"join","z":"c756e3f9.f0b22","name":"join avgs","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1200,"y":780,"wires":[["fe86a3e5.17734"]]},{"id":"fe86a3e5.17734","type":"function","z":"c756e3f9.f0b22","name":"","func":"msg.topic = \"home/PMS3003/AQI\";\nvar pm25aqi = parseInt(msg.payload[\"home/PMS3003/ppm25\"]);\nvar pm10aqi = parseInt(msg.payload[\"home/PMS3003/ppmTen\"]);\n\nif (pm25aqi > pm10aqi) {\n    msg.payload = pm25aqi.toString();\n} else {\n    msg.payload = pm10aqi.toString();\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1360,"y":780,"wires":[["802d918b.7fef9"]]},{"id":"c1de09ca.322588","type":"function","z":"c756e3f9.f0b22","name":"10PPM data to AQI","func":"//Formula taken from https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI\nvar Aqi10mmBreakpoints =  [0.0, 55, 155, 255, 355, 425, 505, 604];\nvar AqiIndexBreakpoints = [0,   51, 101, 151, 201, 301, 401, 500];\nvar ppm = parseFloat(msg.payload);\nvar AQI = 500; //set to max because if the reading doesn't fall in the range of the data, it's very bad AQI;\n\nfor (let i = 0; i < Aqi10mmBreakpoints.length; i++) {\n    if(ppm < Aqi10mmBreakpoints[i]) {\n        //These variable names correspond to the parameter names specefied in the link above.\n        //They aren't great but the intent is to allow these to be looked up that way.\n        // There is a single line version below if that's preferable\n        var I_high = AqiIndexBreakpoints[i] - 1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var I_low = AqiIndexBreakpoints[i-1];\n        var C_high = Aqi10mmBreakpoints[i] - 0.1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var C_low =  Aqi10mmBreakpoints[i - 1];\n        \n        AQI = ((I_high - I_low) / (C_high - C_low)) * (ppm - C_low) + I_low;\n        \n        \n        \n        \n        //AQI = (((AqiIndexBreakpoints[i] - 1 - AqiIndexBreakpoints[i-1])/(Aqi10mmBreakpoints[i] - 0.1 - Aqi10mmBreakpoints[i-1]))*(ppm-Aqi10mmBreakpoints[i-1])) + AqiIndexBreakpoints[i-1]; \n        break;\n    }\n}\n\nmsg.payload = Math.trunc(AQI).toString();\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":630,"y":780,"wires":[["e90350a4.6b9fb","e0353f80.479c9"]]},{"id":"6e7676e8.a72058","type":"function","z":"c756e3f9.f0b22","name":"2.5PPM data to AQI","func":"//Formula taken from https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI\nvar Aqi25mmBreakpoints =  [0.0, 12.1, 35.5, 55.5, 150.5, 250.5, 350.5, 500.5];\nvar AqiIndexBreakpoints = [0,   51,   101,  151,  201,   301,   401,   500]; //this list is the bottom bound for each breakpoint\nvar ppm = parseFloat(msg.payload);\nvar AQI = 500; //set to max because if the reading doesn't fall in the range of the data, it's very bad AQI;\n\nfor (let i = 0; i < Aqi25mmBreakpoints.length; i++) {\n    if(ppm < Aqi25mmBreakpoints[i]) {\n        //These variable names correspond to the parameter names specefied in the link above.\n        //They aren't great but the intent is to allow these to be looked up that way.\n        // There is a single line version below if that's preferable\n        var I_high = AqiIndexBreakpoints[i] - 1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var I_low = AqiIndexBreakpoints[i-1];\n        var C_high = Aqi25mmBreakpoints[i] - 0.1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var C_low =  Aqi25mmBreakpoints[i - 1];\n        \n        AQI = ((I_high - I_low)/(C_high - C_low)) * (ppm - C_low) + I_low;\n        \n        //This is the single line version in case the verbode way using separate variables isn't suitable.\n        //AQI = ((((AqiIndexBreakpoints[i] -1) - AqiIndexBreakpoints[i-1])/((Aqi25mmBreakpoints[i] - 0.1) - Aqi25mmBreakpoints[i-1]))*(ppm-Aqi25mmBreakpoints[i-1])) + AqiIndexBreakpoints[i-1]; \n        break;\n    }\n}\n\nmsg.payload = Math.trunc(AQI).toString();\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":640,"y":700,"wires":[["e90350a4.6b9fb","e7f241b7.47b25"]]},{"id":"2678dbb1.c00384","type":"function","z":"c756e3f9.f0b22","name":"","func":"msg.topic = \"home/PMS3003/AQI_insta\";\nvar pm25aqi = parseInt(msg.payload[\"home/PMS3003/ppm25\"]);\nvar pm10aqi = parseInt(msg.payload[\"home/PMS3003/ppmTen\"]);\n\nif (pm25aqi > pm10aqi) {\n    msg.payload = pm25aqi.toString();\n} else {\n    msg.payload = pm10aqi.toString();\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1360,"y":740,"wires":[["48a1c31c.f4d81c"]]},{"id":"e90350a4.6b9fb","type":"join","z":"c756e3f9.f0b22","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1190,"y":740,"wires":[["2678dbb1.c00384"]]},{"id":"e84756d8.e2dc98","type":"mqtt in","z":"c756e3f9.f0b22","name":"","topic":"home/PMSa003/ppm10","qos":"1","datatype":"auto","broker":"83099161.44dac","x":420,"y":1980,"wires":[["c4631d64.50d76"]]},{"id":"4937d0f9.2e461","type":"mqtt in","z":"c756e3f9.f0b22","name":"","topic":"home/PMSa003/ppm25","qos":"1","datatype":"auto","broker":"83099161.44dac","x":380,"y":900,"wires":[["5b738f0b.fd021","a7d3bd0a.53e2"]]},{"id":"3ca9613c.76c5fe","type":"mqtt in","z":"c756e3f9.f0b22","name":"","topic":"home/PMSa003/ppmTen","qos":"1","datatype":"auto","broker":"83099161.44dac","x":370,"y":980,"wires":[["c23e3169.e8618","ff75fea2.2f55f"]]},{"id":"9443d508.f2afc8","type":"function","z":"c756e3f9.f0b22","name":"2.5PPM data to AQI","func":"//Formula taken from https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI\nvar Aqi25mmBreakpoints =  [0.0, 12.1, 35.5, 55.5, 150.5, 250.5, 350.5, 500.5];\nvar AqiIndexBreakpoints = [0,   51,   101,  151,  201,   301,   401,   500]; //this list is the bottom bound for each breakpoint\nvar ppm = parseFloat(msg.payload);\nvar AQI = 500; //set to max because if the reading doesn't fall in the range of the data, it's very bad AQI;\n\nfor (let i = 0; i < Aqi25mmBreakpoints.length; i++) {\n    if(ppm < Aqi25mmBreakpoints[i]) {\n        //These variable names correspond to the parameter names specefied in the link above.\n        //They aren't great but the intent is to allow these to be looked up that way.\n        // There is a single line version below if that's preferable\n        var I_high = AqiIndexBreakpoints[i] - 1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var I_low = AqiIndexBreakpoints[i-1];\n        var C_high = Aqi25mmBreakpoints[i] - 0.1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var C_low =  Aqi25mmBreakpoints[i - 1];\n        \n        AQI = ((I_high - I_low)/(C_high - C_low)) * (ppm - C_low) + I_low;\n        \n        //This is the single line version in case the verbode way using separate variables isn't suitable.\n        //AQI = ((((AqiIndexBreakpoints[i] -1) - AqiIndexBreakpoints[i-1])/((Aqi25mmBreakpoints[i] - 0.1) - Aqi25mmBreakpoints[i-1]))*(ppm-Aqi25mmBreakpoints[i-1])) + AqiIndexBreakpoints[i-1]; \n        break;\n    }\n}\n\nmsg.payload = Math.trunc(AQI).toString();\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":880,"y":920,"wires":[["8057b533.ce2ac8","b38a4055.12994"]]},{"id":"e9c806be.87bd58","type":"function","z":"c756e3f9.f0b22","name":"10PPM data to AQI","func":"//Formula taken from https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI\nvar Aqi10mmBreakpoints =  [0.0, 55, 155, 255, 355, 425, 505, 604];\nvar AqiIndexBreakpoints = [0,   51, 101, 151, 201, 301, 401, 500];\nvar ppm = parseFloat(msg.payload);\nvar AQI = 500; //set to max because if the reading doesn't fall in the range of the data, it's very bad AQI;\n\nfor (let i = 0; i < Aqi10mmBreakpoints.length; i++) {\n    if(ppm < Aqi10mmBreakpoints[i]) {\n        //These variable names correspond to the parameter names specefied in the link above.\n        //They aren't great but the intent is to allow these to be looked up that way.\n        // There is a single line version below if that's preferable\n        var I_high = AqiIndexBreakpoints[i] - 1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var I_low = AqiIndexBreakpoints[i-1];\n        var C_high = Aqi10mmBreakpoints[i] - 0.1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var C_low =  Aqi10mmBreakpoints[i - 1];\n        \n        AQI = ((I_high - I_low) / (C_high - C_low)) * (ppm - C_low) + I_low;\n        \n        \n        \n        \n        //AQI = (((AqiIndexBreakpoints[i] - 1 - AqiIndexBreakpoints[i-1])/(Aqi10mmBreakpoints[i] - 0.1 - Aqi10mmBreakpoints[i-1]))*(ppm-Aqi10mmBreakpoints[i-1])) + AqiIndexBreakpoints[i-1]; \n        break;\n    }\n}\n\nmsg.payload = Math.trunc(AQI).toString();\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":870,"y":1000,"wires":[["8057b533.ce2ac8","2be2e929.a339f6"]]},{"id":"a7d3bd0a.53e2","type":"function","z":"c756e3f9.f0b22","name":"24 hr rolling average","func":"// determines the average of all payload values passed in \n// over the specified time range\n//const range = 20 * 60 * 1000;   // window time millisecs\n//make this 24 hours as the guide calls for.\nconst range = 24 * 60 * 60 * 1000;   // window time millisecs\nlet buffer = context.get('buffer') || [];\nlet total = context.get('total') || 0;   // the accumulated total so far\n\nlet now = new Date();\nlet value = Number(msg.payload);\n// remove any samples that are too old\nwhile (buffer[0] && buffer[0].timestamp < now - range) {\n    // remove oldest sample from array and total\n    //node.warn(`removing oldest ${buffer[0].timestamp}`);\n    total -= buffer[0].value;\n    buffer.shift();\n}\n// add the new sample to the end\nbuffer.push({timestamp: now, value: value});\ntotal += value;\n\ncontext.set('buffer', buffer);\ncontext.set('total', total);\n\nmsg.payload = total/buffer.length;\n//node.warn(`length: ${buffer.length}, total: ${total}, average: ${msg.payload}`);\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n//var keys = global.keys();\n//for(var i=0;i<keys.length;i++){\n//    global.set(keys[i]);\n//}","finalize":"","x":640,"y":920,"wires":[["9443d508.f2afc8"]]},{"id":"ff75fea2.2f55f","type":"function","z":"c756e3f9.f0b22","name":"24 hr rolling average","func":"// determines the average of all payload values passed in \n// over the specified time range\n//const range = 20 * 60 * 1000;   // window time millisecs\n//make this 24 hours as the guide calls for.\nconst range = 24 * 60 * 60 * 1000;   // window time millisecs\nlet buffer = context.get('buffer') || [];\nlet total = context.get('total') || 0;   // the accumulated total so far\n\nlet now = new Date();\nlet value = Number(msg.payload);\n// remove any samples that are too old\nwhile (buffer[0] && buffer[0].timestamp < now - range) {\n    // remove oldest sample from array and total\n    //node.warn(`removing oldest ${buffer[0].timestamp}`);\n    total -= buffer[0].value;\n    buffer.shift();\n}\n// add the new sample to the end\nbuffer.push({timestamp: now, value: value});\ntotal += value;\n\ncontext.set('buffer', buffer);\ncontext.set('total', total);\n\nmsg.payload = total/buffer.length;\n//node.warn(`length: ${buffer.length}, total: ${total}, average: ${msg.payload}`);\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n//var keys = global.keys();\n//for(var i=0;i<keys.length;i++){\n//    global.set(keys[i]);\n//}","finalize":"","x":640,"y":1000,"wires":[["e9c806be.87bd58"]]},{"id":"8057b533.ce2ac8","type":"join","z":"c756e3f9.f0b22","name":"join avgs","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1200,"y":960,"wires":[["6a0aae2a.e7a96"]]},{"id":"6a0aae2a.e7a96","type":"function","z":"c756e3f9.f0b22","name":"Select highest AQI","func":"msg.topic = \"home/PMSa003/AQI\";\nvar pm25aqi = parseInt(msg.payload[\"home/PMSa003/ppm25\"]);\nvar pm10aqi = parseInt(msg.payload[\"home/PMSa003/ppmTen\"]);\n\nif (pm25aqi > pm10aqi) {\n    msg.payload = pm25aqi.toString();\n} else {\n    msg.payload = pm10aqi.toString();\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1390,"y":960,"wires":[["802d918b.7fef9"]]},{"id":"c23e3169.e8618","type":"function","z":"c756e3f9.f0b22","name":"10PPM data to AQI","func":"//Formula taken from https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI\nvar Aqi10mmBreakpoints =  [0.0, 55, 155, 255, 355, 425, 505, 604];\nvar AqiIndexBreakpoints = [0,   51, 101, 151, 201, 301, 401, 500];\nvar ppm = parseFloat(msg.payload);\nvar AQI = 500; //set to max because if the reading doesn't fall in the range of the data, it's very bad AQI;\n\nfor (let i = 0; i < Aqi10mmBreakpoints.length; i++) {\n    if(ppm < Aqi10mmBreakpoints[i]) {\n        //These variable names correspond to the parameter names specefied in the link above.\n        //They aren't great but the intent is to allow these to be looked up that way.\n        // There is a single line version below if that's preferable\n        var I_high = AqiIndexBreakpoints[i] - 1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var I_low = AqiIndexBreakpoints[i-1];\n        var C_high = Aqi10mmBreakpoints[i] - 0.1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var C_low =  Aqi10mmBreakpoints[i - 1];\n        \n        AQI = ((I_high - I_low) / (C_high - C_low)) * (ppm - C_low) + I_low;\n        \n        \n        \n        \n        //AQI = (((AqiIndexBreakpoints[i] - 1 - AqiIndexBreakpoints[i-1])/(Aqi10mmBreakpoints[i] - 0.1 - Aqi10mmBreakpoints[i-1]))*(ppm-Aqi10mmBreakpoints[i-1])) + AqiIndexBreakpoints[i-1]; \n        break;\n    }\n}\n\nmsg.payload = Math.trunc(AQI).toString();\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":630,"y":960,"wires":[["9a7b1ec4.283a4","e0353f80.479c9"]]},{"id":"5b738f0b.fd021","type":"function","z":"c756e3f9.f0b22","name":"2.5PPM data to AQI","func":"//Formula taken from https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI\nvar Aqi25mmBreakpoints =  [0.0, 12.1, 35.5, 55.5, 150.5, 250.5, 350.5, 500.5];\nvar AqiIndexBreakpoints = [0,   51,   101,  151,  201,   301,   401,   500]; //this list is the bottom bound for each breakpoint\nvar ppm = parseFloat(msg.payload);\nvar AQI = 500; //set to max because if the reading doesn't fall in the range of the data, it's very bad AQI;\n\nfor (let i = 0; i < Aqi25mmBreakpoints.length; i++) {\n    if(ppm < Aqi25mmBreakpoints[i]) {\n        //These variable names correspond to the parameter names specefied in the link above.\n        //They aren't great but the intent is to allow these to be looked up that way.\n        // There is a single line version below if that's preferable\n        var I_high = AqiIndexBreakpoints[i] - 1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var I_low = AqiIndexBreakpoints[i-1];\n        var C_high = Aqi25mmBreakpoints[i] - 0.1; //the subtraction is to move the term back into the proper range specefied on Wikipedia\n        var C_low =  Aqi25mmBreakpoints[i - 1];\n        \n        AQI = ((I_high - I_low)/(C_high - C_low)) * (ppm - C_low) + I_low;\n        \n        //This is the single line version in case the verbode way using separate variables isn't suitable.\n        //AQI = ((((AqiIndexBreakpoints[i] -1) - AqiIndexBreakpoints[i-1])/((Aqi25mmBreakpoints[i] - 0.1) - Aqi25mmBreakpoints[i-1]))*(ppm-Aqi25mmBreakpoints[i-1])) + AqiIndexBreakpoints[i-1]; \n        break;\n    }\n}\n\nmsg.payload = Math.trunc(AQI).toString();\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":640,"y":880,"wires":[["9a7b1ec4.283a4","e7f241b7.47b25"]]},{"id":"1253da09.fa6766","type":"function","z":"c756e3f9.f0b22","name":"Select higest AQI","func":"msg.topic = \"home/PMSa003/AQI_insta\";\nvar pm25aqi = parseInt(msg.payload[\"home/PMSa003/ppm25\"]);\nvar pm10aqi = parseInt(msg.payload[\"home/PMSa003/ppmTen\"]);\n\nif (pm25aqi > pm10aqi) {\n    msg.payload = pm25aqi.toString();\n} else {\n    msg.payload = pm10aqi.toString();\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1390,"y":920,"wires":[["48a1c31c.f4d81c"]]},{"id":"9a7b1ec4.283a4","type":"join","z":"c756e3f9.f0b22","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1190,"y":920,"wires":[["1253da09.fa6766"]]},{"id":"c4631d64.50d76","type":"join","z":"c756e3f9.f0b22","name":"join PM1.0","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"3","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":670,"y":1960,"wires":[["ee887a2a.0ef0c8"]]},{"id":"265c97e6.291d28","type":"link in","z":"c756e3f9.f0b22","name":"","links":["50d587bd.5bc5f8","dc18ee62.f7d0e"],"x":515,"y":2040,"wires":[["c4631d64.50d76","2c990192.cc127e"]]},{"id":"ee887a2a.0ef0c8","type":"function","z":"c756e3f9.f0b22","name":"Format for logging","func":"var data_array = [msg.payload[\"home/ticker_10\"],\nmsg.payload[\"home/PMS3003/ppm10\"],\nmsg.payload[\"home/PMSa003/ppm10\"]\n];\nmsg.payload = data_array\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":870,"y":1960,"wires":[["bf389122.bf0ef"]]},{"id":"8aa095e1.6d44c8","type":"mqtt in","z":"c756e3f9.f0b22","name":"","topic":"home/SDS011/ppm25","qos":"1","datatype":"auto","broker":"83099161.44dac","x":420,"y":2120,"wires":[["2c990192.cc127e"]]},{"id":"a8d0f6a9.ce5f08","type":"mqtt in","z":"c756e3f9.f0b22","name":"","topic":"home/PMS3003/ppm25","qos":"1","datatype":"auto","broker":"83099161.44dac","x":420,"y":2180,"wires":[["2c990192.cc127e"]]},{"id":"4cb5d0de.3e8f3","type":"mqtt in","z":"c756e3f9.f0b22","name":"","topic":"home/PMSa003/ppm25","qos":"1","datatype":"auto","broker":"83099161.44dac","x":420,"y":2240,"wires":[["2c990192.cc127e"]]},{"id":"2c990192.cc127e","type":"join","z":"c756e3f9.f0b22","name":"join PM2.5","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"4","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":670,"y":2180,"wires":[["2c69b1bf.6dbade"]]},{"id":"2c69b1bf.6dbade","type":"function","z":"c756e3f9.f0b22","name":"Format for logging","func":"var data_array = [msg.payload[\"home/ticker_10\"],\nmsg.payload[\"home/SDS011/ppm25\"],\nmsg.payload[\"home/PMS3003/ppm25\"],\nmsg.payload[\"home/PMSa003/ppm25\"]\n];\nmsg.payload = data_array\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":870,"y":2180,"wires":[[]]},{"id":"c661e6ab.362bd8","type":"mqtt in","z":"c756e3f9.f0b22","name":"","topic":"home/SDS011/ppm10","qos":"1","datatype":"auto","broker":"83099161.44dac","x":420,"y":2420,"wires":[["647134d7.816c3c"]]},{"id":"ec0d5519.805628","type":"mqtt in","z":"c756e3f9.f0b22","name":"","topic":"home/PMS3003/ppmTen","qos":"1","datatype":"auto","broker":"83099161.44dac","x":430,"y":2480,"wires":[["647134d7.816c3c"]]},{"id":"6c42d48c.f0a18c","type":"mqtt in","z":"c756e3f9.f0b22","name":"","topic":"home/PMSa003/ppmTen","qos":"1","datatype":"auto","broker":"83099161.44dac","x":430,"y":2540,"wires":[["647134d7.816c3c"]]},{"id":"87d5ca6d.0f1378","type":"link in","z":"c756e3f9.f0b22","name":"","links":["50d587bd.5bc5f8","dc18ee62.f7d0e"],"x":515,"y":2340,"wires":[["647134d7.816c3c"]]},{"id":"647134d7.816c3c","type":"join","z":"c756e3f9.f0b22","name":"join PM_ten","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"4","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":750,"y":2480,"wires":[["8c4ea199.4eadc"]]},{"id":"8c4ea199.4eadc","type":"function","z":"c756e3f9.f0b22","name":"Format for logging","func":"var data_array = [msg.payload[\"home/ticker_10\"],\nmsg.payload[\"home/SDS011/ppm10\"],\nmsg.payload[\"home/PMS3003/ppmTen\"],\nmsg.payload[\"home/PMSa003/ppmTen\"]\n];\nmsg.payload = data_array\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":970,"y":2480,"wires":[["c1a780f3.12da8"]]},{"id":"802d918b.7fef9","type":"join","z":"c756e3f9.f0b22","name":"logging final AQI avgs","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"4","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1850,"y":580,"wires":[["27be3dc9.95c5c2"]]},{"id":"ff914280.4bacc","type":"link in","z":"c756e3f9.f0b22","name":"","links":["50d587bd.5bc5f8","dc18ee62.f7d0e"],"x":1715,"y":960,"wires":[["48a1c31c.f4d81c"]]},{"id":"48a1c31c.f4d81c","type":"join","z":"c756e3f9.f0b22","name":"join instantaneous AQIs","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"4","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1880,"y":760,"wires":[["c7cc82d1.5b04e"]]},{"id":"c7cc82d1.5b04e","type":"function","z":"c756e3f9.f0b22","name":"Format for logging","func":"var data_array = [msg.payload[\"home/ticker_10\"],\nmsg.payload[\"home/SDS011/AQI_insta\"],\nmsg.payload[\"home/PMS3003/AQI_insta\"],\nmsg.payload[\"home/PMSa003/AQI_insta\"]\n];\nmsg.payload = data_array\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":2190,"y":760,"wires":[[]]},{"id":"57f39bf1.5d1214","type":"link in","z":"c756e3f9.f0b22","name":"","links":["302dba82.ccb146"],"x":1755,"y":460,"wires":[["802d918b.7fef9"]]},{"id":"27be3dc9.95c5c2","type":"function","z":"c756e3f9.f0b22","name":"Format for logging","func":"var data_array = [msg.payload[\"home/ticker_30\"],\nmsg.payload[\"home/SDS011/AQI\"],\nmsg.payload[\"home/PMS3003/AQI\"],\nmsg.payload[\"home/PMSa003/AQI\"]\n];\nmsg.payload = data_array\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":2190,"y":580,"wires":[[]]},{"id":"e0353f80.479c9","type":"join","z":"c756e3f9.f0b22","name":"join PM10 instantaneous AQIs","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"4","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1230,"y":1140,"wires":[["4ff7e8e5.9084a8"]]},{"id":"4ff7e8e5.9084a8","type":"function","z":"c756e3f9.f0b22","name":"Format for logging","func":"var data_array = [msg.payload[\"home/ticker_10\"],\nmsg.payload[\"home/SDS011/ppm10\"],\nmsg.payload[\"home/PMS3003/ppmTen\"],\nmsg.payload[\"home/PMSa003/ppmTen\"]\n];\nmsg.payload = data_array\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1530,"y":1140,"wires":[[]]},{"id":"b05d524a.8e0f9","type":"link in","z":"c756e3f9.f0b22","name":"","links":["50d587bd.5bc5f8","dc18ee62.f7d0e"],"x":975,"y":1220,"wires":[["e0353f80.479c9","e7f241b7.47b25"]]},{"id":"e7f241b7.47b25","type":"join","z":"c756e3f9.f0b22","name":"join PM2.5 instantaneous AQIs","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"4","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1230,"y":1280,"wires":[["4662dcac.9e5614"]]},{"id":"4662dcac.9e5614","type":"function","z":"c756e3f9.f0b22","name":"Format for logging","func":"var data_array = [msg.payload[\"home/ticker_10\"],\nmsg.payload[\"home/SDS011/ppm25\"],\nmsg.payload[\"home/PMS3003/ppm25\"],\nmsg.payload[\"home/PMSa003/ppm25\"]\n];\nmsg.payload = data_array\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1510,"y":1280,"wires":[[]]},{"id":"83bbc2c.643e84","type":"GSheet","z":"c756e3f9.f0b22","creds":"e21f03ec.823c2","method":"append","action":"","sheet":"","cells":"PM_1_0","flatten":false,"name":"","x":1390,"y":1960,"wires":[[]]},{"id":"39d2382c.993ab8","type":"GSheet","z":"c756e3f9.f0b22","creds":"e21f03ec.823c2","method":"append","action":"","sheet":"","cells":"PM_2_5","flatten":false,"name":"","x":1110,"y":2180,"wires":[[]]},{"id":"a3a5405a.d6631","type":"GSheet","z":"c756e3f9.f0b22","creds":"e21f03ec.823c2","method":"append","action":"","sheet":"","cells":"PM_10","flatten":false,"name":"","x":1390,"y":2480,"wires":[[]]},{"id":"79492b30.43cce4","type":"GSheet","z":"c756e3f9.f0b22","creds":"e21f03ec.823c2","method":"append","action":"","sheet":"","cells":"AQI pm2.5 insta","flatten":false,"name":"","x":1890,"y":1280,"wires":[[]]},{"id":"97e2ee46.2670d","type":"GSheet","z":"c756e3f9.f0b22","creds":"e21f03ec.823c2","method":"append","action":"","sheet":"","cells":"AQI pm10 insta","flatten":false,"name":"","x":1970,"y":1140,"wires":[[]]},{"id":"bcae58c.2abb6a8","type":"GSheet","z":"c756e3f9.f0b22","creds":"e21f03ec.823c2","method":"append","action":"","sheet":"","cells":"Overall AQI insta","flatten":false,"name":"","x":2430,"y":760,"wires":[[]]},{"id":"b7dcfbb8.59d248","type":"GSheet","z":"c756e3f9.f0b22","creds":"e21f03ec.823c2","method":"append","action":"","sheet":"","cells":"Overall AQI avg","flatten":false,"name":"","x":2430,"y":580,"wires":[[]]},{"id":"2be2e929.a339f6","type":"join","z":"c756e3f9.f0b22","name":"join PM10 average AQIs","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"4","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1170,"y":320,"wires":[["d3e2223.28ab5e"]]},{"id":"d3e2223.28ab5e","type":"function","z":"c756e3f9.f0b22","name":"Format for logging","func":"var data_array = [msg.payload[\"home/ticker_30\"],\nmsg.payload[\"home/SDS011/ppm10\"],\nmsg.payload[\"home/PMS3003/ppmTen\"],\nmsg.payload[\"home/PMSa003/ppmTen\"]\n];\nmsg.payload = data_array\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1470,"y":320,"wires":[[]]},{"id":"94d73f64.82f6c","type":"link in","z":"c756e3f9.f0b22","name":"","links":["302dba82.ccb146"],"x":735,"y":340,"wires":[["2be2e929.a339f6","b38a4055.12994"]]},{"id":"b38a4055.12994","type":"join","z":"c756e3f9.f0b22","name":"join PM2.5 average AQIs","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"4","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1170,"y":380,"wires":[["4bacfeda.9777d"]]},{"id":"4bacfeda.9777d","type":"function","z":"c756e3f9.f0b22","name":"Format for logging","func":"var data_array = [msg.payload[\"home/ticker_30\"],\nmsg.payload[\"home/SDS011/ppm25\"],\nmsg.payload[\"home/PMS3003/ppm25\"],\nmsg.payload[\"home/PMSa003/ppm25\"]\n];\nmsg.payload = data_array\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1470,"y":380,"wires":[[]]},{"id":"120f3dd5.41ef72","type":"GSheet","z":"c756e3f9.f0b22","creds":"e21f03ec.823c2","method":"append","action":"","sheet":"","cells":"AQI pm2.5 avg","flatten":false,"name":"","x":1690,"y":380,"wires":[[]]},{"id":"e9d6d361.00a2a","type":"GSheet","z":"c756e3f9.f0b22","creds":"e21f03ec.823c2","method":"append","action":"","sheet":"","cells":"AQI pm10 avg","flatten":false,"name":"","x":1690,"y":320,"wires":[[]]},{"id":"bf389122.bf0ef","type":"delay","z":"c756e3f9.f0b22","name":"","pauseType":"delay","timeout":"100","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1070,"y":1960,"wires":[[]]},{"id":"c1a780f3.12da8","type":"delay","z":"c756e3f9.f0b22","name":"","pauseType":"delay","timeout":"700","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1170,"y":2480,"wires":[[]]},{"id":"604fb23b.7d5b5c","type":"inject","z":"c756e3f9.f0b22","name":"10 min ticker","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"*/10 0-23 * * *","once":false,"onceDelay":0.1,"topic":"home/ticker_10","payload":"tick","payloadType":"str","x":260,"y":1760,"wires":[["8d3ede2d.5d74d"]]},{"id":"8d3ede2d.5d74d","type":"moment","z":"c756e3f9.f0b22","name":"","topic":"","input":"","inputType":"date","inTz":"ETC/UTC","adjAmount":"0","adjType":"hours","adjDir":"subtract","format":"dd MM-DD HH:mm:ss","locale":"en-US","output":"payload","outputType":"msg","outTz":"US/Pacific","x":480,"y":1760,"wires":[["c4631d64.50d76"]]},{"id":"d1c6b0b.d88c95","type":"mqtt in","z":"c756e3f9.f0b22","name":"","topic":"home/PMS3003/xtra","qos":"1","datatype":"auto","broker":"83099161.44dac","x":210,"y":80,"wires":[[]]},{"id":"83099161.44dac","type":"mqtt-broker","name":"","broker":"localhost","port":"1883","clientid":"","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"e21f03ec.823c2","type":"gauth"}]
